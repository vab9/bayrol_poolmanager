"""switch.py for filter pump controller."""

import logging

import requests
import voluptuous as vol

from homeassistant.components.switch import SwitchEntity
from homeassistant.const import CONF_NAME
from homeassistant.helpers import config_validation as cv
from homeassistant.helpers.entity import Entity

from .const import DOMAIN

_LOGGER = logging.getLogger(__name__)

CONF_MODES = "modes"
CONF_URL = "url"

DEFAULT_NAME = "Pump Controller"

CONFIG_SCHEMA = vol.Schema(
    {
        DOMAIN: vol.Schema(
            {
                vol.Required(CONF_URL): cv.url,
                vol.Optional(CONF_NAME, default=DEFAULT_NAME): cv.string,
                vol.Optional(
                    CONF_MODES,
                    default={"eco": 1, "normal": 2, "high": 3, "auto": 4, "off": 5},
                ): dict,
            }
        )
    },
    extra=vol.ALLOW_EXTRA,
)


def setup_platform(hass, config, add_entities, discovery_info=None):
    """Set up the pump controller switch."""
    name = config.get(CONF_NAME)
    url = config[CONF_URL]
    modes = config[CONF_MODES]

    add_entities([PumpControllerSwitch(name, url, modes)])


class PumpControllerSwitch(SwitchEntity):
    """Representation of the pump controller switch."""

    def __init__(self, name, url, modes):
        """Initialize the pump controller."""
        self._name = name
        self._url = url
        self._modes = modes
        self._state = None

    @property
    def name(self):
        """Return the name of the switch."""
        return self._name

    @property
    def is_on(self):
        """Return true if the switch is on."""
        return self._state is not None and self._state != "off"

    def turn_on(self, **kwargs):
        """Turn the pump on to a default mode (e.g., normal)."""
        self.set_mode("normal")

    def turn_off(self, **kwargs):
        """Turn the pump off."""
        self.set_mode("off")

    def set_mode(self, mode):
        """Send a POST request to set the pump mode."""
        if mode not in self._modes:
            _LOGGER.error(f"Invalid mode: {mode}")
            return

        payload = {
            "get": ["60.5427.value", "1.1256.value", "1.1246.value"],
            "set": {"60.5427.value": str(self._modes[mode])},
        }

        try:
            response = requests.post(self._url, json=payload)
            if response.status_code == 200:
                self._state = mode
                _LOGGER.info(f"Successfully set pump mode to {mode}.")
            else:
                _LOGGER.error(
                    f"Failed to set pump mode. Status code: {response.status_code}"
                )
        except requests.RequestException as e:
            _LOGGER.error(f"Error setting pump mode: {e}")

    def update(self):
        """Fetch the latest state of the pump (optional)."""
        # Implement logic to get the pump's current state if an API exists
